---
uti: com.xamarin.workbook
platforms:
- iOS
- Console
packages:
- id: Newtonsoft.Json
  version: 8.0.3
---

# Mobile Center API (WebClient)

Check out the [Mobile Center API Swagger](https://docs.mobile.azure.com/api/) to see what you can do!
To start with, enter your login credentials (NOT your Github credentials, they won't work here):

```csharp
var username = "EMAIL_ADDRESS";
var password = "PASSWORD";
```

## Authorize

Before using the API, your login credentials are required to obtain an API token
that will be used to authorize subsequent requests.

```csharp
using System.Text;
string authInfo = username + ":" + password;
authInfo = Convert.ToBase64String(Encoding.Default.GetBytes(authInfo));
```

```csharp
using System.Net;
using System.Text;
using System.IO;

WebClient client = new WebClient();
client.Headers.Add (HttpRequestHeader.Accept, "application/json");
client.Headers.Add (HttpRequestHeader.ContentType, "application/json");
client.Headers.Add ("Authorization", "Basic " + authInfo);
var response = client.UploadString (new Uri("https://api.mobile.azure.com/v0.1/api_tokens"), "POST", "{}");
```

Create a class (using the Swagger Json documentation as a guide) to deserialize the response:

```csharp
public class ApiTokenResponse
{
  public string id {get;set;}
  public string created_at {get;set;}
  public string api_token {get;set;}
}
```

Now deserialize the response into that class

```csharp
#r "Newtonsoft.Json"
using Newtonsoft.Json;

var token = JsonConvert.DeserializeObject<ApiTokenResponse> (response);
token
```

Woohoo! Now we can use the `api_token` in subsequent requests to the API.

## User Profile

Once again using Swagger as a guide, create a class to populate with API data:

```csharp
public class UserProfileResponse
{
  public string id {get;set;}
  public string email {get;set;}
  public string display_name {get;set;}
  public string name {get;set;}
  public string avatar_url {get;set;}
  public bool can_change_password {get;set;}
}
```

then using the API Token in the `X-API-Token` header, make a request to retrieve the user profile

```csharp
WebClient client = new WebClient();
client.Headers.Add (HttpRequestHeader.ContentType, "application/json");
client.Headers.Add (HttpRequestHeader.Accept, "application/json");
client.Headers.Add ("X-API-Token", token.api_token);
var response = client.DownloadData (new Uri("https://api.mobile.azure.com/v0.1/user"));

var responseString = System.Text.Encoding.UTF8.GetString(response);
var profile = JsonConvert.DeserializeObject<UserProfileResponse> (responseString);

profile
```

## Apps List

Once again using Swagger as a guide, create a class to populate with API data:

```csharp
public class AppResponse
{
  public string id {get;set;}
  public string app_secret {get;set;}
  public string description {get;set;}
  public string display_name {get;set;}
  public string name {get;set;}
  public string platform {get;set;}
  public string language {get;set;}
  public string icon_url {get;set;}
  // ignoring owner info for now
  public string azure_subscription_id {get;set;}
}
public class AppsResponse
{
  public AppResponse[] Apps {get;set;}
}
```

then using the API Token in the `X-API-Token` header, make a request to retrieve the app list

```csharp
WebClient client = new WebClient();
client.Headers.Add (HttpRequestHeader.ContentType, "application/json");
client.Headers.Add (HttpRequestHeader.Accept, "application/json");
client.Headers.Add ("X-API-Token", token.api_token);
var response = client.DownloadData (new Uri("https://api.mobile.azure.com/v0.1/apps"));

var responseString = System.Text.Encoding.UTF8.GetString(response);
var apps = JsonConvert.DeserializeObject<AppResponse[]> (responseString);

apps
```

```csharp
apps[0]
```

## Next stepsâ€¦

Using variations on the above code you can easily build up interactions with the Mobile Center API,
including reporting or managing apps and services. Check out the [Mobile Center API Swagger](https://docs.mobile.azure.com/api/) for the complete list of operations available.
